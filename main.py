import gradio as gr
import os
from utils import clean_text, chunk_text, summarize_chunks, count_tokens
from config import get_api_key
import requests
import docx
import PyPDF2
import io

# –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–∞
TOGETHER_API_KEY = get_api_key()

# –ü—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
PROMPT = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∞–º–º–∞—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏, –∫–æ—Ç–æ—Ä–æ–µ:

1. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏ –∏–¥–µ–∏
2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —á–µ—Ç–∫–∏–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫
4. –ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
5. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
6. –û—Ç—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω –∏ —Å—Ç–∏–ª—å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞

–°–æ–∑–¥–∞–π —Å–∞–º–º–∞—Ä–∏ –¥–ª–∏–Ω–æ–π 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ –¥–∞–∂–µ —á–∏—Ç–∞—Ç–µ–ª—é, –Ω–µ –∑–Ω–∞–∫–æ–º–æ–º—É —Å —Ç–µ–º–æ–π.

–¢–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:
{TEXT}

–°–∞–º–º–∞—Ä–∏:"""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Together.ai (Mistral-7B-Instruct)
def query_together_ai(prompt, api_key=TOGETHER_API_KEY):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Together.ai (Mistral-7B-Instruct) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.
    """
    url = "https://api.together.xyz/v1/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "mistralai/Mistral-7B-Instruct-v0.3",
        "prompt": prompt,
        "max_tokens": 512,
        "temperature": 0.3,
        "top_p": 0.9
    }
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=60)
        response.raise_for_status()
        data = response.json()
        return data['choices'][0]['text'].strip()
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Together.ai: {e}]"

def get_text_from_file(file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    if file is None:
        return None
        
    file_name = file.name.lower()
    
    try:
        if file_name.endswith('.txt'):
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ txt —Ñ–∞–π–ª–∞
            with open(file.name, 'r', encoding='utf-8') as f:
                return f.read()
        elif file_name.endswith('.docx'):
            # –î–ª—è docx –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            doc = docx.Document(file.name)
            return '\n'.join([paragraph.text for paragraph in doc.paragraphs])
        elif file_name.endswith('.pdf'):
            # –î–ª—è pdf –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            pdf_reader = PyPDF2.PdfReader(file.name)
            text = ''
            for page in pdf_reader.pages:
                text += page.extract_text() + '\n'
            return text
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def get_text_statistics(text):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É"""
    words = text.split()
    sentences = text.split('.')
    tokens = count_tokens(text)
    return f"–°–ª–æ–≤: {len(words)}, –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(sentences)}, –¢–æ–∫–µ–Ω–æ–≤: {tokens}"

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
def summarize_interface(text, file):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–æ–ª—è –∏–ª–∏ —Ñ–∞–π–ª–∞
    if file is not None:
        file_text = get_text_from_file(file)
        if file_text:
            text = file_text
        else:
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.', '', ''
            
    if not text or text.strip() == '':
        return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.', '', ''

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_text_statistics(text)
    
    # 1. –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    cleaned = clean_text(text)
    # 2. –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
    chunks = chunk_text(cleaned)
    # 3. –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏
    summary = summarize_chunks(chunks, query_together_ai, PROMPT)
    
    return text, summary, stats

# Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
demo = gr.Interface(
    fn=summarize_interface,
    inputs=[
        gr.Textbox(
            label="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏", 
            lines=10,
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏, –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."
        ),
        gr.File(
            label="–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", 
            file_types=[".txt", ".doc", ".docx", ".pdf"],
            file_count="single"
        )
    ],
    outputs=[
        gr.Textbox(label="–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç", lines=10),
        gr.Textbox(label="–°–∞–º–º–∞—Ä–∏", lines=5),
        gr.Textbox(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", lines=2)
    ],
    title="üéÆ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è Ifortex ML Intern (2025)",
    description="""
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:
    - –ù–æ–≤–æ—Å—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    - –û—Ç—á—ë—Ç—ã –∏ –ø–æ—Å—Ç—ã
    - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –í–∏–∫–∏–ø–µ–¥–∏–∏
    - –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (.txt, .doc, .docx, .pdf)
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –∫–æ—Ä–æ—Ç–∫–∏–µ (~500 —Å–ª–æ–≤), —Ç–∞–∫ –∏ –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã (–¥–æ 5000+ —Å–ª–æ–≤).
    """,
    examples=[
        ["–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏. –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.", None]
    ]
)

def main():
    demo.launch()

if __name__ == "__main__":
    main() 